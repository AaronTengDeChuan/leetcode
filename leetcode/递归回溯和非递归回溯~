题目来源：leetcode

**51.N Queens

**52.N Queens II

**77.Combinations

**78.Subsets

**90.Subsets II



**77.Combinations
  Given two integers n and k, return all possible combinations of k numbers out of 1 ... n.

For example,
If n = 4 and k = 2, a solution is:

[
  [2,4],
  [3,4],
  [2,3],
  [1,2],
  [1,3],
  [1,4],
]

思路：
     经典的递归回溯问题，def backtracking(self, results, nums , i, n, k, value_list)
     回溯函数书写时的小技巧： value_list + [nums[j]]， 这样做既做到了不改变 value_list 列表，还做到了把新的列表传递给下一层的递归函数。
代码如下：
#!usr/bin/env python
#-*-coding:utf-8-*-
import sys

class Solution(object):
    def backtracking(self, results, nums , i, n, k, value_list):
        if k == 0:
            results.append([i for i in value_list])
            return 
        for j in range(i, n - k + 1): 
            self.backtracking(results, nums, j + 1, n, k - 1, value_list + [nums[j]])


    def combine(self, n, k):
        nums = []
        results = []
        if n == 0 or k == 0:
            return results
        for i in range(1, n + 1):
            nums.append(i)
        self.backtracking(results, nums, 0, n, k, [])
        return results
solution = Solution()
n = 4
k = 2
results = solution.combine(n, k)
for i in results:
    print i




**78.Subsets
  Given a set of distinct integers, nums, return all possible subsets.

Note: The solution set must not contain duplicate subsets.

For example,
If nums = [1,2,3], a solution is:

[
  [3],
  [1],
  [2],
  [1,2,3],
  [1,3],
  [2,3],
  [1,2],
  []
]

思路：
     非递归实现，使用循环，顺序生成前 1 个元素的子集集合、前 2 个元素的子集集合、前 3 个元素的子集集合、......
     假设已经有前 i - 1 个元素的子集集合， 如何得到 前 i 个 元素的子集集合呢？ 
	我们知道，前 i 个元素的子集中，有一半的子集包含 第 i 个元素，另一半的子集不包含（这一半的子集就是前 i - 1 个元素的子集）。所以，前 i - 1 个元素的所有子集 加上 第 i 个元素所构成的子集集合 就是 包含 第 i 个元素的那一半的子集。
     子集的生成规则已经找到了，有一点递归的意思，即生成 n 个元素的子集 可以利用前 n - 1 个元素的子集集合。但是在这里，我们用循环代替递归。

源代码如下：

#!usr/bin/env python
#-*-coding:utf-8-*-
import sys

class Solution(object):
    def subsets(self, nums):
        """
        :type nums: List[int]
        :rtype: List[List[int]]
        """
        results = [[]]
        for i in range(len(nums)):
            tmp = []
            for j in results:
                tmp.append(j + [nums[i]])
            results += tmp
        return results

solution = Solution()
nums = [1,2,3]
results = solution.subsets(nums)
for i in results:
    print i




**90.Subsets II
  Given a collection of integers that might contain duplicates, nums, return all possible subsets.

Note: The solution set must not contain duplicate subsets.

For example,
If nums = [1,2,2], a solution is:

[
  [2],
  [1],
  [1,2,2],
  [2,2],
  [1,2],
  []
]


思路：
     这道题和78题类似，只不过所给的集合中有 重复 的元素（真是够了，集合里还可以有重复元素。）
     也可以使用循环来做，先对数组排序，对于排好序的数组 应用 78 题的代码，不过有小小的改动。
	假设已经生成前 i - 1 个元素的所有子集
		如果 第 i 个元素和 第 i - 1 个元素不相同，前 i 个元素的子集生成方式和 78 题一样， 但是问题出现在元素相同的情况
		如果 第 i 个元素和 第 i - 1 个元素相同，应用同样的规则就会出现 重复 的结果，所以我们要从不会出现重复的位置（这里说的位置是前 i - 1 个元素的子集集合的下标位置）开始生成子集， 这个位置是需要记录下来的 。
		关于这个位置的选择，就当做思考题啦！

源代码如下：

#!usr/bin/env python
#-*-coding:utf-8-*-
import sys

class Solution(object):
    def subsetsWithDup(self, nums):
        """
        :type nums: List[int]
        :rtype: List[List[int]]
        """
        nums.sort()
        results = [[]]
        start = 0
        for i in range(len(nums)):
            j = 0
            if i > 0 and nums[i] == nums[i - 1]:
                j = start
                start = len(results)
            else:
                start = len(results)
            tmp = []
            for k in range(j, len(results)):
                tmp.append(results[k] + [nums[i]])
            results += tmp
        return results

solution = Solution()
nums = [1,2,3,3,3]
results = solution.subsetsWithDup(nums)
for i in results:
    print i

