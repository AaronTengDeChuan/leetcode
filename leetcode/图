133.Clone Graph
  Clone an undirected graph. Each node in the graph contains a label and a list of its neighbors.

OJ's undirected graph serialization:

Nodes are labeled uniquely.
We use # as a separator for each node, and , as a separator for node label and each neighbor of the node.

As an example, consider the serialized graph {0,1,2#1,2#2,2}.

The graph has a total of three nodes, and therefore contains three parts as separated by #.

    First node is labeled as 0. Connect node 0 to both nodes 1 and 2.
    Second node is labeled as 1. Connect node 1 to node 2.
    Third node is labeled as 2. Connect node 2 to node 2 (itself), thus forming a self-cycle.

Visually, the graph looks like the following:

       1
      / \
     /   \
    0 --- 2
         / \
         \_/

题意：克隆一个无向图，无向图的每一个结点有一个 label（唯一） 和 一系列的邻接结点。
思路：
    我采用的是 BFS（宽度优先搜索），需要注意的是搜索的数据结构是图，和 树结构不同 图是可以有环的。所以在搜索的时候要避免重复遍历 某些结点，否则会出现死循环。
    采用字典结构来保存已经生成的无向图结点，key = 结点的 label（每一个结点的 label 值是唯一的，所以可以作为 key）， value = 结点本身。
    每遍历一个结点，就生成一个结点 cur 放入字典中（第一个结点要生成），
	同时把它的所有邻接结点生成出来放入字典中（如果某个邻接结点已经在字典中无需再生成），这些结点中之前不在字典内的要加入到队列里，实现宽度优先遍历，
	并把这些新生成邻接结点放入 cur 的邻接表中。

AC的源代码如下：
class UndirectedGraphNode:
    def __init__(self, x):
        self.label = x
        self.neighbors = []

class Solution:
    # @param node, a undirected graph node
    # @return a undirected graph node
    def cloneGraph(self, node):
        if node == None:
            return None
        queue = [node]
        dict = {}
        while len(queue) > 0:
            tmp = queue[0]
            del queue[0]
            if tmp.label not in dict:
                dict[tmp.label] = UndirectedGraphNode(tmp.label)
            if len(dict[tmp.label].neighbors) == 0:
                for w in tmp.neighbors:
                    if w.label not in dict:
                        dict[w.label] = UndirectedGraphNode(w.label)
                        queue.append(w)
                    dict[tmp.label].neighbors.append(dict[w.label])
        return dict[node.label]

    def printGraph(self, node):
        result = []
        if node == None:
            return result
        queue = [node]
        dict = []
        while len(queue) > 0:
            tmp = queue[0]
            del queue[0]
            dict.append(tmp.label)
            value = [tmp.label]
            for w in tmp.neighbors:
                value.append(w.label)
                if w.label not in dict:
                    dict.append(w.label)
                    queue.append(w)
            result.append(value)
        return result

solution = Solution()
node = UndirectedGraphNode(0)
p = node 
p.neighbors = [UndirectedGraphNode(1), UndirectedGraphNode(2)]
p.neighbors[0].neighbors = [p.neighbors[1]]
p.neighbors[1].neighbors = [p.neighbors[1]]
node = solution.cloneGraph(node)
result = solution.printGraph(node)
for i in result:
    print i



138. Copy List with Random Pointer 
  A linked list is given such that each node contains an additional random pointer which could point to any node in the list or null.

Return a deep copy of the list. 

【思路】
一个比较特殊的图，使用克隆的思想可以解决（建立新老指针的一一对应关系）。

【Complexity】
	Time : O(n)

	Space: O(n)

【Python代码】
#!usr/bin/env python
#-*-coding:utf-8-*-
import sys

class RandomListNode(object):
    def __init__(self, x):
        self.label = x
        self.next = None
        self.random = None

class Solution(object):
    def copyRandomList(self, head):
        """
        :type head: RandomListNode
        :rtype: RandomListNode
        """
        if head == None:
            return None
        p = RandomListNode(head.label)
        dict = {head:p}
        result = p
        while head != None:
            if head.next != None:
                if head.next in dict:
                    result.next = dict[head.next]
                else:
                    result.next = RandomListNode(head.next.label)
                    dict[head.next] = result.next
            if head.random != None:
                if head.random in dict:
                    result.random = dict[head.random]
                else:
                    result.random = RandomListNode(head.random.label)
                    dict[head.random] = result.random
            head = head.next
            result = result.next
        return p

solution = Solution()
head = RandomListNode(1)
head.next = None
head.random = head
head = solution.copyRandomList(head)
while head != None:
    print head.label,'(' + str(head.random.label) + ')',
    head = head.next

143.Reorder List
  Given a singly linked list L: L0→L1→…→Ln-1→Ln,
reorder it to: L0→Ln→L1→Ln-1→L2→Ln-2→…

You must do this in-place without altering the nodes' values.

For example,
Given {1,2,3,4}, reorder it to {1,4,2,3}.

【思路】
把所有的链表节点的指针存在 一个 List 中。
如果列表 List[0,1,...,n-2,n-1]，那么 List[0] --> List[n-1] --> List[1] --> List[n-2] --> List[2] --> List[n-3] -->...... 就是满足要求的单链表

【Python代码】
#!usr/bin/env python
#-*-coding:utf-8-*-
import sys

class ListNode(object):
    def __init__(self, x):
        self.val = x
        self.next = None
class Solution(object):
    def reorderList(self, head):
        """
        :type head: ListNode
        :rtype: void Do not return anything, modify head in-place instead.
        """
        set = []
        p = head
        while p != None:
            set.append(p)
            p = p.next
        i = 0
        j = len(set) - 1
        while i < j:
            set[i].next = set[j]
            if j - i == 1:
                set[j].next = None
            else:
                set[j].next = set[i + 1]
                if j - i == 2:
                    set[i + 1].next = None
            i += 1
            j -= 1



