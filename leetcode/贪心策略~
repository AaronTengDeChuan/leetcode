leetcode中利用贪心策略的题目：
	44.Wildcard Matching
	45.Jump Game II
	55.Jump Game （Editorial Solution）
	135.Candy

55.Jump Game
      Given an array of non-negative integers, you are initially positioned at the first index of the array.

    Each element in the array represents your maximum jump length at that position.

    Determine if you are able to reach the last index.

    For example:
    A = [2,3,1,1,4], return true.

    A = [3,2,1,0,4], return false. 

【思路】
	从数组的右端至左端迭代，对于每一个位置决策它是否可能到达一个好的位置（指的是可以通过这个好的位置达到终点），即 currPosition + nums[currPosition] >= leftmostGoodIndex 。
	可以到达好的位置，代表着此时的位置是可以到达终点的，这个位置变成 leftmost GOOD index 。继续迭代，直到数组的起始，如果起始位置是好的，说明可以从起始位置到达终点。
	我们不在乎某一个位置最远可以跳到哪里，只要它跳过了 leftmostGoodIndex 就说明它可以到达终点，因为我们只需要知道一条路。

    代码如下：

public class Solution {
    public boolean canJump(int[] nums) {
        int lastPos = nums.length - 1;
        for (int i = nums.length - 1; i >= 0; i--) {
            if (i + nums[i] >= lastPos) {
                lastPos = i;
            }
        }
        return lastPos == 0;
    }
}

135.Candy
  There are N children standing in a line. Each child is assigned a rating value.

You are giving candies to these children subjected to the following requirements:

    Each child must have at least one candy.
    Children with a higher rating get more candies than their neighbors.

What is the minimum candies you must give? 
【题意】

多个小朋友站成一排，根据他们的得分分发糖果，得分高的小朋友要比旁边得分低的小朋友得到的糖果多，每个小朋友至少得到一枚糖果，问最少要准备多少糖果？

【思路一】

先从左到右扫描一遍，使得右边比左边得分高的小朋友糖果数比左边多。

再从右到左扫描一遍，使得左边比右边得分高的小朋友糖果数比右边多。

【思路二】

Hi guys!

This solution picks each element from the input array only once. First, we give a candy to the first child. Then for each child we have three cases:

    His/her rating is equal to the previous one -> give 1 candy.
    His/her rating is greater than the previous one -> give him (previous + 1) candies.
    His/her rating is less than the previous one -> don't know what to do yet, let's just count the number of such consequent cases.

When we enter 1 or 2 condition we can check our count from 3. If it's not zero then we know that we were descending before and we have everything to update our total candies amount: number of children in descending sequence of raitings - coundDown, number of candies given at peak - prev (we don't update prev when descending). Total number of candies for "descending" children can be found through arithmetic progression formula (1+2+...+countDown). Plus we need to update our peak child if his number of candies is less then or equal to countDown.

Here's a pretty concise code below.

【Python代码--解法一】

#!usr/bin/env python
#-*-coding:utf-8-*-
import sys

class Solution(object):
    def candy(self, ratings):
        """
        :type ratings: List[int]
        :rtype: int
        """
        candies = [1] * len(ratings)
        for i in range(1, len(ratings)):
            if ratings[i] > ratings[i - 1]:
                candies[i] = candies[i - 1] + 1
        for i in range(len(ratings) - 2, -1 , -1):
            if ratings[i] > ratings[i + 1] and candies[i] <= candies[i + 1]:
                candies[i] = candies[i + 1] + 1
        sum = 0
        for i in candies:
            sum += i
        return sum

solution = Solution()
ratings = [4,2,3,4,1]
print solution.candy(ratings)

【Python代码--解法二】

class Solution(object):
    def candy(self, ratings):
        prev = 1
        total = 1
        countDown = 0
        for i in range(1, len(ratings)):
            if ratings[i] >= ratings[i - 1]:
                if countDown > 0:
                    total += countDown * (1 + countDown) / 2
                    if prev <= countDown:
                        total += countDown - prev + 1
                    countDown = 0
                    prev = 1
                if ratings[i] == ratings[i - 1]:
                    prev = 1
                else:
                    prev += 1
                total += prev
            else:
                countDown += 1
        if countDown > 0:
            total += countDown * (1 + countDown) / 2
            if countDown >= prev:
                total += countDown - prev + 1
        return total
